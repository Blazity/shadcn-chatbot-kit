{
  "name": "message-input",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion@11"
  ],
  "registryDependencies": [
    "http://localhost:3333/r/use-autosize-textarea.json"
  ],
  "files": [
    {
      "path": "ui/message-input.tsx",
      "content": "\"use client\"\n\nimport React, { useRef, useState } from \"react\"\nimport { AnimatePresence, motion } from \"framer-motion\"\nimport { ArrowUp, Paperclip, Square, X } from \"lucide-react\"\nimport { omit } from \"remeda\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\nimport { useAutosizeTextArea } from \"../hooks/use-autosize-textarea\"\n\ninterface MessageInputBaseProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  value: string\n  submitOnEnter?: boolean\n  stop?: () => void\n  isGenerating: boolean\n}\n\ninterface MessageInputWithoutAttachmentProps extends MessageInputBaseProps {\n  allowAttachments?: false\n}\n\ninterface MessageInputWithAttachmentsProps extends MessageInputBaseProps {\n  allowAttachments: true\n  files: File[] | null\n  setFiles: React.Dispatch<React.SetStateAction<File[] | null>>\n}\n\ntype MessageInputProps =\n  | MessageInputWithoutAttachmentProps\n  | MessageInputWithAttachmentsProps\n\nexport function MessageInput({\n  placeholder = \"Ask AI...\",\n  className,\n  onKeyDown,\n  submitOnEnter = true,\n  stop,\n  isGenerating,\n  ...props\n}: MessageInputProps) {\n  const [isDragging, setIsDragging] = useState(false)\n\n  const onDragOver = (event: React.DragEvent) => {\n    if (props.allowAttachments !== true) return\n    event.preventDefault()\n    setIsDragging(true)\n  }\n\n  const onDragLeave = (event: React.DragEvent) => {\n    if (props.allowAttachments !== true) return\n    event.preventDefault()\n    setIsDragging(false)\n  }\n\n  const onDrop = (event: React.DragEvent) => {\n    setIsDragging(false)\n    if (props.allowAttachments !== true) return\n    event.preventDefault()\n    const dataTransfer = event.dataTransfer\n    if (dataTransfer.files.length) {\n      props.setFiles(Array.from(dataTransfer.files))\n    }\n  }\n\n  const textAreaRef = useRef<HTMLTextAreaElement | null>(null)\n\n  const showFileList =\n    props.allowAttachments && props.files && props.files.length > 0\n\n  useAutosizeTextArea({\n    ref: textAreaRef,\n    maxHeight: 240,\n    borderWidth: 1,\n    dependencies: [props.value, showFileList],\n  })\n\n  return (\n    <div\n      className=\"relative flex w-full\"\n      onDragOver={onDragOver}\n      onDragLeave={onDragLeave}\n      onDrop={onDrop}\n    >\n      <textarea\n        aria-label=\"Write your prompt here\"\n        placeholder={placeholder}\n        ref={textAreaRef}\n        onKeyDown={(event) => {\n          if (submitOnEnter && event.key === \"Enter\" && !event.shiftKey) {\n            event.preventDefault()\n            event.currentTarget.form?.requestSubmit()\n          }\n\n          onKeyDown?.(event)\n        }}\n        className={cn(\n          \"w-full grow resize-none rounded-xl border border-input bg-background p-3 pr-24 text-sm ring-offset-background transition-[border,padding] placeholder:text-muted-foreground focus-visible:border-primary focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50\",\n          showFileList && \"pb-16\",\n          className\n        )}\n        // TODO: better way to do this\n        {...(props.allowAttachments\n          ? omit(props, [\"allowAttachments\", \"files\", \"setFiles\"])\n          : omit(props, [\"allowAttachments\"]))}\n      />\n\n      <AnimatePresence mode=\"popLayout\">\n        {props.allowAttachments && props.files && (\n          <div className=\"absolute bottom-0 left-0 w-full overflow-x-scroll p-3\">\n            <div className=\"flex space-x-3\">\n              {props.files.map((file) => {\n                return (\n                  <motion.div\n                    className=\"relative flex max-w-[200px] rounded-md border p-3 text-xs\"\n                    key={file.name + String(file.lastModified)}\n                    layout\n                    initial={{ opacity: 0, y: \"100%\" }}\n                    animate={{ opacity: 1, y: 0 }}\n                    exit={{ opacity: 0, y: \"100%\" }}\n                  >\n                    <button\n                      className=\"absolute -right-2 -top-2 flex h-4 w-4 items-center justify-center rounded-full border bg-background\"\n                      type=\"button\"\n                      onClick={() => {\n                        props.setFiles((files) => {\n                          if (!files) return null\n\n                          const filtered = Array.from(files).filter(\n                            (f) => f !== file\n                          )\n                          if (filtered.length === 0) return null\n                          return filtered\n                        })\n                      }}\n                    >\n                      <X className=\"h-2.5 w-2.5\" />\n                    </button>\n                    <span className=\"w-full truncate text-muted-foreground\">\n                      {file.name}\n                    </span>\n                  </motion.div>\n                )\n              })}\n            </div>\n          </div>\n        )}\n      </AnimatePresence>\n\n      <div className=\"absolute right-3 top-3 flex gap-2\">\n        {props.allowAttachments && (\n          <Button\n            type=\"button\"\n            size=\"icon\"\n            variant=\"outline\"\n            className=\"h-8 w-8\"\n            aria-label=\"Attach a file\"\n            onClick={async () => {\n              const files = await showFileUploadDialog()\n              props.setFiles(files)\n            }}\n          >\n            <Paperclip className=\"h-4 w-4\" />\n          </Button>\n        )}\n        {isGenerating ? (\n          <Button\n            type=\"button\"\n            size=\"icon\"\n            className=\"h-8 w-8\"\n            aria-label=\"Stop generating\"\n            onClick={stop}\n          >\n            <Square className=\"h-3 w-3\" fill=\"currentColor\" />\n          </Button>\n        ) : (\n          <Button\n            type=\"submit\"\n            size=\"icon\"\n            className=\"h-8 w-8\"\n            aria-label=\"Send message\"\n          >\n            <ArrowUp className=\"h-5 w-5\" />\n          </Button>\n        )}\n      </div>\n\n      {props.allowAttachments && <FileUploadOverlay isDragging={isDragging} />}\n    </div>\n  )\n}\nMessageInput.displayName = \"MessageInput\"\n\ninterface FileUploadOverlayProps {\n  isDragging: boolean\n}\n\nfunction FileUploadOverlay({ isDragging }: FileUploadOverlayProps) {\n  return (\n    <AnimatePresence>\n      {isDragging && (\n        <motion.div\n          className=\"pointer-events-none absolute inset-0 flex items-center justify-center space-x-2 rounded-xl border border-dashed border-border bg-background text-sm text-muted-foreground\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          transition={{ duration: 0.2 }}\n          aria-hidden\n        >\n          <Paperclip className=\"h-4 w-4\" />\n          <span>Drop your files here to attach them.</span>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  )\n}\n\nfunction showFileUploadDialog() {\n  const input = document.createElement(\"input\")\n\n  input.type = \"file\"\n  input.multiple = true\n  // TODO: define accept values?\n  input.accept = \"*/*\"\n  input.click()\n\n  return new Promise<File[] | null>((resolve) => {\n    input.onchange = (e) => {\n      const files = (e.currentTarget as HTMLInputElement).files\n\n      if (files) {\n        resolve(Array.from(files))\n        return\n      }\n\n      resolve(null)\n    }\n  })\n}\n",
      "type": "registry:ui",
      "target": "components/ui/message-input.tsx"
    }
  ]
}